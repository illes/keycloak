{
  "apiVersion" : "1",
  "swaggerVersion" : "1.2",
  "basePath" : "http://localhost:8080/auth",
  "resourcePath" : "/Client Scopes",
  "apis" : [ {
    "path" : "/admin/realms/{realm}/client-scopes",
    "operations" : [ {
      "method" : "GET",
      "nickname" : "getClientScopes",
      "type" : "array",
      "items" : {
        "$ref" : "ClientScopeRepresentation"
      },
      "parameters" : [ {
        "type" : "string",
        "description" : "realm name (not id!)",
        "paramType" : "path",
        "name" : "realm",
        "required" : true
      } ],
      "summary" : "Get client scopes belonging to the realm\n\n Returns a list of client scopes belonging to the realm",
      "produces" : [ "application/json" ]
    }, {
      "method" : "POST",
      "nickname" : "createClientScope",
      "type" : "Response",
      "parameters" : [ {
        "type" : "ClientScopeRepresentation",
        "paramType" : "body",
        "name" : "rep",
        "required" : true
      }, {
        "type" : "string",
        "description" : "realm name (not id!)",
        "paramType" : "path",
        "name" : "realm",
        "required" : true
      } ],
      "summary" : "Create a new client scope\n\n Client Scope's name must be unique!",
      "consumes" : [ "application/json" ]
    } ]
  }, {
    "path" : "/admin/realms/{realm}/client-scopes/{id}",
    "operations" : [ {
      "method" : "PUT",
      "nickname" : "update",
      "type" : "Response",
      "parameters" : [ {
        "type" : "ClientScopeRepresentation",
        "paramType" : "body",
        "name" : "rep",
        "required" : true
      }, {
        "type" : "string",
        "description" : "id of client scope (not name)",
        "paramType" : "path",
        "name" : "id",
        "required" : true
      }, {
        "type" : "string",
        "description" : "realm name (not id!)",
        "paramType" : "path",
        "name" : "realm",
        "required" : true
      } ],
      "summary" : "Update the client scope",
      "consumes" : [ "application/json" ]
    }, {
      "method" : "GET",
      "nickname" : "getClientScope",
      "type" : "ClientScopeRepresentation",
      "parameters" : [ {
        "type" : "string",
        "description" : "id of client scope (not name)",
        "paramType" : "path",
        "name" : "id",
        "required" : true
      }, {
        "type" : "string",
        "description" : "realm name (not id!)",
        "paramType" : "path",
        "name" : "realm",
        "required" : true
      } ],
      "summary" : "Get representation of the client scope",
      "produces" : [ "application/json" ]
    }, {
      "method" : "DELETE",
      "nickname" : "deleteClientScope",
      "type" : "Response",
      "parameters" : [ {
        "type" : "string",
        "description" : "id of client scope (not name)",
        "paramType" : "path",
        "name" : "id",
        "required" : true
      }, {
        "type" : "string",
        "description" : "realm name (not id!)",
        "paramType" : "path",
        "name" : "realm",
        "required" : true
      } ],
      "summary" : "Delete the client scope"
    } ]
  } ],
  "models" : {
    "ClientScopeRepresentation" : {
      "id" : "ClientScopeRepresentation",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "protocol" : {
          "type" : "string"
        },
        "attributes" : {
          "type" : "object"
        },
        "protocolMappers" : {
          "type" : "array",
          "items" : {
            "$ref" : "ProtocolMapperRepresentation"
          }
        }
      }
    },
    "ProtocolMapperRepresentation" : {
      "id" : "ProtocolMapperRepresentation",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "protocol" : {
          "type" : "string"
        },
        "protocolMapper" : {
          "type" : "string"
        },
        "config" : {
          "type" : "object"
        }
      }
    }
  }
}